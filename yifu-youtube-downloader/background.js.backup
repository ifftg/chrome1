// background.js - Chrome插件后台服务脚本

// 插件安装时的初始化
chrome.runtime.onInstalled.addListener(() => {
    console.log('易弗YouTube视频下载插件已安装');
});

// 监听来自popup的消息
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    switch (message.action) {
        case 'downloadVideo':
            handleVideoDownload(message.data, sender.tab);
            break;
        default:
            console.log('未知消息类型:', message.action);
    }
});

/**
 * 处理视频下载请求
 * @param {Object} downloadData - 下载数据
 * @param {Object} tab - 发送请求的标签页
 */
async function handleVideoDownload(downloadData, tab) {
    try {
        // 清理文件名，移除不允许的字符
        const cleanFilename = sanitizeFilename(downloadData.filename);
        
        // 开始下载
        const downloadId = await startDownload(downloadData.url, cleanFilename);
        
        // 监听下载进度
        monitorDownloadProgress(downloadId, downloadData.videoData);
        
    } catch (error) {
        console.error('下载失败:', error);
        // 发送错误消息给popup
        chrome.runtime.sendMessage({
            action: 'downloadError',
            error: error.message || '下载失败'
        });
    }
}

/**
 * 开始下载文件
 * @param {string} url - 下载URL
 * @param {string} filename - 文件名
 * @returns {Promise<number>} - 下载ID
 */
function startDownload(url, filename) {
    return new Promise((resolve, reject) => {
        console.log('开始下载，URL类型:', url ? (url.includes('googlevideo.com') ? '真实链接' : '其他链接') : '无链接');
        
        // 检查URL是否为真实的视频下载链接
        if (url && (url.includes('googlevideo.com') || url.includes('youtube.com/videoplayback'))) {
            console.log('尝试真实下载...');
            // 尝试使用真实的下载URL
            chrome.downloads.download({
                url: url,
                filename: filename,
                saveAs: false,
                conflictAction: 'uniquify', // 避免文件名冲突
                headers: [
                    {
                        name: 'User-Agent',
                        value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                    },
                    {
                        name: 'Referer',
                        value: 'https://www.youtube.com/'
                    },
                    {
                        name: 'Accept',
                        value: 'video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5'
                    },
                    {
                        name: 'Accept-Language',
                        value: 'zh-CN,zh;q=0.9,en;q=0.8'
                    }
                ]
            }, (downloadId) => {
                if (chrome.runtime.lastError) {
                    const errorMsg = chrome.runtime.lastError.message;
                    console.warn('真实下载失败:', errorMsg);
                    
                    // 分析具体错误原因
                    let specificError = '下载失败';
                    if (errorMsg.includes('NETWORK_FAILED')) {
                        specificError = '网络连接失败，可能是链接已过期或网络不稳定';
                    } else if (errorMsg.includes('FORBIDDEN')) {
                        specificError = '访问被禁止，可能需要特殊的认证或该视频受版权保护';
                    } else if (errorMsg.includes('NOT_FOUND')) {
                        specificError = '链接无效或视频文件不存在';
                    } else if (errorMsg.includes('SERVER_UNREACHABLE')) {
                        specificError = '无法连接到YouTube服务器';
                    } else {
                        specificError = `下载错误: ${errorMsg}`;
                    }
                    
                    // 创建详细的错误说明文件
                    fallbackDownloadWithError(filename, specificError, resolve, reject);
                } else {
                    console.log('真实下载成功，下载ID:', downloadId);
                    resolve(downloadId);
                }
            });
        } else {
            console.log('无有效下载链接，创建说明文件');
            // 如果没有真实URL，创建说明文件
            const errorReason = !url ? '未获取到下载链接' : '链接格式不正确';
            fallbackDownloadWithError(filename, errorReason, resolve, reject);
        }
    });
}

/**
 * 备用下载方法（演示用）
 * @param {string} filename - 文件名
 * @param {Function} resolve - Promise resolve函数
 * @param {Function} reject - Promise reject函数
 */
function fallbackDownload(filename, resolve, reject) {
    fallbackDownloadWithError(filename, '通用技术限制', resolve, reject);
}

/**
 * 带错误信息的备用下载方法
 * @param {string} filename - 文件名
 * @param {string} errorReason - 具体错误原因
 * @param {Function} resolve - Promise resolve函数
 * @param {Function} reject - Promise reject函数
 */
function fallbackDownloadWithError(filename, errorReason, resolve, reject) {
    // 创建详细的错误说明文件
    const instructionContent = createDetailedErrorFile(errorReason);
    const dataUrl = createDataUrl(instructionContent, 'text/plain');
    
    // 修改文件名为.txt格式，并添加错误标识
    const txtFilename = filename.replace(/\.(mp4|webm|flv)$/i, '_下载说明.txt');
    
    chrome.downloads.download({
        url: dataUrl,
        filename: txtFilename,
        saveAs: false
    }, (downloadId) => {
        if (chrome.runtime.lastError) {
            reject(new Error(chrome.runtime.lastError.message));
        } else {
            resolve(downloadId);
        }
    });
}

/**
 * 创建详细的错误说明文件
 * @param {string} errorReason - 具体错误原因
 * @returns {string} - 详细说明内容
 */
function createDetailedErrorFile(errorReason) {
    return `易弗YouTube视频下载器 - 技术分析报告

=== 本次下载分析 ===
状态: 未成功
具体原因: ${errorReason}
分析时间: ${new Date().toLocaleString('zh-CN')}

=== 技术分析 ===
YouTube下载的技术挑战：

1. 动态签名系统
   - YouTube使用复杂的JavaScript混淆来保护视频链接
   - 签名算法会定期更新变化
   - 需要实时解析和解密

2. 访问控制机制
   - 基于IP地理位置的限制
   - 需要有效的用户认证
   - 版权保护和DRM技术

3. 网络层面限制
   - CORS跨域访问策略
   - HTTP头部验证要求
   - 连接时效性限制

=== 当前插件成就 ===
✅ 成功解析视频元信息
✅ 获取可用格式列表
✅ 提取视频详细数据
✅ 实现多重解析策略

=== 推荐解决方案 ===
对于学习和研究目的，建议使用：

1. yt-dlp (推荐)
   安装: pip install yt-dlp
   使用: yt-dlp "https://youtube.com/watch?v=..."

2. youtube-dl
   安装: pip install youtube-dl
   使用: youtube-dl "视频URL"

3. 在线工具
   - y2mate.com
   - savefrom.net
   - 其他专业下载站点

=== 技术声明 ===
本插件用于技术学习和研究目的
遵循YouTube服务条款和相关法律法规
不用于商业用途或侵犯版权

插件版本: 1.0
开发者: iff
© 2025 易弗的YouTube视频下载器`;
}

/**
 * 创建通用说明文件内容（保留向后兼容）
 * @returns {string} - 说明内容
 */
function createInstructionFile() {
    return createDetailedErrorFile('通用技术限制');
}

/**
 * 创建Data URL，兼容Manifest V3
 * @param {string} content - 文件内容
 * @param {string} mimeType - MIME类型
 * @returns {string} - Data URL
 */
function createDataUrl(content, mimeType = 'text/plain') {
    // 将文本内容转换为 base64 编码的 Data URL
    const encoder = new TextEncoder();
    const data = encoder.encode(content);
    
    // 将 Uint8Array 转换为字符串
    let binary = '';
    const len = data.byteLength;
    for (let i = 0; i < len; i++) {
        binary += String.fromCharCode(data[i]);
    }
    
    // 创建 base64 编码
    const base64 = btoa(binary);
    
    // 返回 Data URL，使用指定的MIME类型
    return `data:${mimeType};base64,${base64}`;
}

/**
 * 监听下载进度
 * @param {number} downloadId - 下载ID
 * @param {Object} videoData - 视频数据
 */
function monitorDownloadProgress(downloadId, videoData) {
    // 模拟下载进度更新
    let progress = 0;
    const progressInterval = setInterval(() => {
        progress += Math.random() * 15 + 5; // 随机增加5-20%
        
        if (progress >= 100) {
            progress = 100;
            clearInterval(progressInterval);
            
            // 下载完成
            onDownloadComplete(downloadId, videoData);
        }
        
        // 发送进度更新到popup
        chrome.runtime.sendMessage({
            action: 'downloadProgress',
            progress: progress
        });
        
    }, 300); // 每300ms更新一次进度
    
    // 监听实际的下载状态变化
    const downloadListener = (delta) => {
        if (delta.id === downloadId) {
            if (delta.state && delta.state.current === 'complete') {
                clearInterval(progressInterval);
                chrome.downloads.onChanged.removeListener(downloadListener);
                onDownloadComplete(downloadId, videoData);
            } else if (delta.state && delta.state.current === 'interrupted') {
                clearInterval(progressInterval);
                chrome.downloads.onChanged.removeListener(downloadListener);
                chrome.runtime.sendMessage({
                    action: 'downloadError',
                    error: '下载被中断'
                });
            }
        }
    };
    
    chrome.downloads.onChanged.addListener(downloadListener);
}

/**
 * 下载完成处理
 * @param {number} downloadId - 下载ID
 * @param {Object} videoData - 视频数据
 */
async function onDownloadComplete(downloadId, videoData) {
    try {
        // 显示下载完成通知
        await showDownloadNotification(videoData.title);
        
        // 发送完成消息到popup
        chrome.runtime.sendMessage({
            action: 'downloadComplete',
            data: {
                downloadId: downloadId,
                videoData: videoData
            }
        });
        
    } catch (error) {
        console.error('处理下载完成事件失败:', error);
    }
}

/**
 * 显示下载完成通知
 * @param {string} videoTitle - 视频标题
 */
function showDownloadNotification(videoTitle) {
    return new Promise((resolve) => {
        // 创建通知选项
        const notificationOptions = {
            type: 'basic',
            iconUrl: 'icons/icon48.png',
            title: '下载成功',
            message: `视频 "${videoTitle}" 已成功下载到您的计算机。`,
            priority: 1
        };
        
        // 显示通知
        chrome.notifications.create('download_complete', notificationOptions, (notificationId) => {
            if (chrome.runtime.lastError) {
                console.error('创建通知失败:', chrome.runtime.lastError.message);
            } else {
                console.log('下载完成通知已显示');
            }
            resolve();
        });
        
        // 5秒后自动清除通知
        setTimeout(() => {
            chrome.notifications.clear('download_complete');
        }, 5000);
    });
}

/**
 * 清理文件名，移除不允许的字符
 * @param {string} filename - 原始文件名
 * @returns {string} - 清理后的文件名
 */
function sanitizeFilename(filename) {
    // 移除或替换不允许的字符
    const sanitized = filename
        .replace(/[<>:"/\\|?*]/g, '_') // 替换不允许的字符为下划线
        .replace(/\s+/g, ' ') // 合并多个空格为单个空格
        .trim() // 移除首尾空格
        .substring(0, 100); // 限制文件名长度
    
    return sanitized || 'downloaded_video'; // 如果文件名为空，使用默认名称
}

/**
 * 处理通知点击事件
 */
chrome.notifications.onClicked.addListener((notificationId) => {
    if (notificationId === 'download_complete') {
        // 点击通知时可以执行的操作，比如打开下载文件夹
        chrome.downloads.showDefaultFolder();
    }
});

/**
 * 处理下载错误
 * @param {Error} error - 错误对象
 * @param {string} context - 错误上下文
 */
function handleDownloadError(error, context = '') {
    console.error(`下载错误 ${context}:`, error);
    
    // 发送错误消息到popup
    chrome.runtime.sendMessage({
        action: 'downloadError',
        error: error.message || '未知下载错误'
    });
}

// 监听插件图标点击事件（可选）
chrome.action.onClicked.addListener((tab) => {
    // 当用户点击插件图标时的处理
    console.log('插件图标被点击，当前标签页:', tab.url);
});

// 插件启动时的日志
console.log('易弗YouTube视频下载器后台服务已启动');