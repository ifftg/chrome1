/**
 * ÊòìÂºóYouTubeËßÜÈ¢ë‰∏ãËΩΩÂô®ÂêéÁ´ØÊúçÂä° - ‰∏ì‰∏öÁâà
 * Êû∂ÊûÑÈáçÊûÑÁâàÊú¨Ôºö‰∏ìÊ≥®‰∫éËßÜÈ¢ë‰ø°ÊÅØËß£ÊûêÔºå‰∏ãËΩΩÈÄªËæëÁßªËá≥ÂâçÁ´Ø
 * 
 * Ê†∏ÂøÉËÅåË¥£Ôºö
 * 1. Êèê‰æõËßÜÈ¢ë‰ø°ÊÅØËß£ÊûêÊúçÂä°ÔºàÂîØ‰∏ÄÊ†∏ÂøÉÂäüËÉΩÔºâ
 * 2. ÊúçÂä°Âô®Áä∂ÊÄÅÊ£ÄÊü•
 * 3. yt-dlpÂ∑•ÂÖ∑Áä∂ÊÄÅÊ£ÄÊü•
 * 
 * Â∑≤ÁßªÈô§ÂäüËÉΩÔºö
 * - ËßÜÈ¢ë‰∏ãËΩΩÊé•Âè£Ôºà/api/download-videoÔºâ
 * - ‰∏ãËΩΩËøõÂ∫¶Êü•ËØ¢Ôºà/api/download-progressÔºâ
 * - ‰∏ãËΩΩÊñá‰ª∂ÁÆ°ÁêÜÔºà/api/downloadsÔºâ
 */

const express = require('express');
const cors = require('cors');
const path = require('path');
const { spawn } = require('child_process');
const fs = require('fs');

// ÂàõÂª∫ Express Â∫îÁî®
const app = express();
const PORT = process.env.PORT || 3000;

// ‰∏≠Èó¥‰ª∂ÈÖçÁΩÆ
app.use(cors()); // ÂÖÅËÆ∏Ë∑®ÂüüËØ∑Ê±Ç
app.use(express.json()); // Ëß£Êûê JSON ËØ∑Ê±Ç‰Ωì
app.use(express.static('public')); // ÈùôÊÄÅÊñá‰ª∂ÊúçÂä°

// ÂàõÂª∫ÂøÖË¶ÅÁöÑÁõÆÂΩïÔºà‰ªÖÁî®‰∫éÊó•ÂøóÂíåÁºìÂ≠òÔºâ
const publicDir = path.join(__dirname, 'public');

if (!fs.existsSync(publicDir)) {
    fs.mkdirSync(publicDir, { recursive: true });
    console.log(`üìÅ ÂàõÂª∫ÁõÆÂΩï: ${publicDir}`);
}

// ============================================================================
// API Ë∑ØÁî±ÂÆö‰πâ
// ============================================================================

/**
 * ÊúçÂä°Âô®Áä∂ÊÄÅÊ£ÄÊü•Ë∑ØÁî±
 */
app.get('/api/test', (req, res) => {
    res.json({
        message: 'ÊòìÂºóYouTube‰∏ãËΩΩÂô®ÂêéÁ´ØÊúçÂä°ËøêË°åÊ≠£Â∏∏ÔºÅ',
        timestamp: new Date().toLocaleString('zh-CN'),
        status: 'success',
        version: '2.0.0-professional',
        architecture: 'parsing-only',
        api_endpoints: [
            'GET  /api/test - ÊúçÂä°Âô®Áä∂ÊÄÅÊ£ÄÊü•',
            'GET  /api/check-ytdlp - yt-dlpÂ∑•ÂÖ∑Áä∂ÊÄÅÊ£ÄÊü•',
            'POST /api/parse-video - ËßÜÈ¢ë‰ø°ÊÅØËß£ÊûêÔºàÊ†∏ÂøÉÂäüËÉΩÔºâ'
        ],
        note: '‰∏ì‰∏öÁâàÊû∂ÊûÑÔºöÂêéÁ´Ø‰∏ìÊ≥®Ëß£ÊûêÔºåÂâçÁ´ØË¥üË¥£‰∏ãËΩΩ'
    });
});

/**
 * Ê£ÄÊü•yt-dlpÂ∑•ÂÖ∑ÊòØÂê¶ÂèØÁî®
 */
app.get('/api/check-ytdlp', (req, res) => {
    console.log('üîç Ê£ÄÊü•yt-dlpÂ∑•ÂÖ∑Áä∂ÊÄÅ...');
    
    const ytDlpProcess = spawn('yt-dlp', ['--version']);
    
    let version = '';
    ytDlpProcess.stdout.on('data', (data) => {
        version += data.toString();
    });
    
    ytDlpProcess.on('close', (code) => {
        if (code === 0) {
            console.log('‚úÖ yt-dlpÂèØÁî®ÔºåÁâàÊú¨:', version.trim());
            res.json({
                status: 'success',
                message: 'yt-dlpÂèØÁî®',
                version: version.trim()
            });
        } else {
            console.log('‚ùå yt-dlp‰∏çÂèØÁî®ÔºåÈÄÄÂá∫Á†Å:', code);
            res.status(500).json({
                status: 'error',
                message: 'yt-dlp‰∏çÂèØÁî®ÔºåËØ∑Ê£ÄÊü•ÂÆâË£Ö'
            });
        }
    });
    
    ytDlpProcess.on('error', (error) => {
        console.log('‚ùå yt-dlpÊú™ÊâæÂà∞:', error.message);
        res.status(500).json({
            status: 'error',
            message: 'yt-dlpÊú™ÂÆâË£Ö',
            error: error.message
        });
    });
});

/**
 * ËßÜÈ¢ë‰ø°ÊÅØËß£ÊûêË∑ØÁî± - Ê†∏ÂøÉÂäüËÉΩ
 * ËøôÊòØÂêéÁ´ØÁöÑÂîØ‰∏ÄÊ†∏ÂøÉËÅåË¥£ÔºöËß£ÊûêËßÜÈ¢ë‰ø°ÊÅØÂπ∂ËøîÂõûÁªôÂâçÁ´Ø
 */
app.post('/api/parse-video', async (req, res) => {
    try {
        const { url } = req.body;
        
        if (!url) {
            return res.status(400).json({
                error: 'ËØ∑Êèê‰æõYouTubeËßÜÈ¢ëURL',
                status: 'error'
            });
        }

        console.log('üîç ÂºÄÂßãËß£ÊûêËßÜÈ¢ë:', url);

        // ‰ΩøÁî®‰ºòÂåñÁöÑyt-dlpÂèÇÊï∞Ëß£ÊûêËßÜÈ¢ë‰ø°ÊÅØ
        const ytDlpProcess = spawn('yt-dlp', [
            '--dump-json',
            '--no-playlist',
            '--no-warnings',
            '--ignore-config',
            '--geo-bypass',
            '--force-ipv4',
            '--no-check-certificate',
            '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0 Safari/537.36',
            '--referer', 'https://www.youtube.com',
            '--add-header', 'Accept-Language: zh-CN,zh;q=0.9',
            '--extractor-args', 'youtube:player_client=android',
            url
        ]);

        let stdout = '';
        let stderr = '';

        ytDlpProcess.stdout.on('data', (data) => {
            stdout += data.toString();
        });

        ytDlpProcess.stderr.on('data', (data) => {
            stderr += data.toString();
        });

        ytDlpProcess.on('close', (code) => {
            if (code === 0 && stdout) {
                try {
                    const videoInfo = JSON.parse(stdout);
                    console.log('‚úÖ ËßÜÈ¢ë‰ø°ÊÅØËß£ÊûêÊàêÂäü:', videoInfo.title);
                    
                    // Â§ÑÁêÜÂíå‰ºòÂåñÊ†ºÂºè‰ø°ÊÅØ
                    const processedData = processVideoInfo(videoInfo, url);
                    
                    res.json({
                        status: 'success',
                        data: processedData
                    });

                } catch (parseError) {
                    console.error('‚ùå Ëß£ÊûêJSONÂ§±Ë¥•:', parseError);
                    res.status(500).json({
                        error: 'Ëß£ÊûêËßÜÈ¢ë‰ø°ÊÅØÂ§±Ë¥•',
                        status: 'error'
                    });
                }
            } else {
                console.error('‚ùå yt-dlpÊâßË°åÂ§±Ë¥•:', stderr);
                
                // Â¶ÇÊûúÊòØ403Á≠âÊùÉÈôêÈóÆÈ¢òÔºåÂ∞ùËØï‰ΩøÁî®ÊµèËßàÂô®CookieÈáçËØï
                if (/403|forbidden|permission|denied/i.test(stderr || '')) {
                    console.warn('‚ö†Ô∏è ÊùÉÈôêÈóÆÈ¢òÔºåÂ∞ùËØï‰ΩøÁî®ÊµèËßàÂô®CookieÈáçËØï...');
                    retryWithCookies(url, res);
                    return;
                }
                
                res.status(500).json({
                    error: 'Êó†Ê≥ïËé∑ÂèñËßÜÈ¢ë‰ø°ÊÅØÔºåËØ∑Ê£ÄÊü•URLÊòØÂê¶Ê≠£Á°ÆÊàñËßÜÈ¢ëÊòØÂê¶ÂèØËÆøÈóÆ',
                    status: 'error',
                    details: stderr
                });
            }
        });

        ytDlpProcess.on('error', (error) => {
            console.error('‚ùå ÂêØÂä®yt-dlpÂ§±Ë¥•:', error);
            res.status(500).json({
                error: 'yt-dlpÊú™ÂÆâË£ÖÊàñÈÖçÁΩÆÈîôËØØ',
                status: 'error',
                details: error.message
            });
        });

    } catch (error) {
        console.error('‚ùå Ëß£ÊûêËßÜÈ¢ëÊó∂Âá∫Èîô:', error);
        res.status(500).json({
            error: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
            status: 'error'
        });
    }
});

// ============================================================================
// ËæÖÂä©ÂáΩÊï∞
// ============================================================================

/**
 * ‰ΩøÁî®ÊµèËßàÂô®CookieÈáçËØïËß£Êûê
 */
function retryWithCookies(url, res) {
    console.log('üîÑ ‰ΩøÁî®ÊµèËßàÂô®CookieÈáçËØïËß£Êûê...');
    
    const retry = spawn('yt-dlp', [
        '--dump-json',
        '--no-playlist',
        '--no-warnings',
        '--ignore-config',
        '--geo-bypass',
        '--force-ipv4',
        '--no-check-certificate',
        '--user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0 Safari/537.36',
        '--referer', 'https://www.youtube.com',
        '--add-header', 'Accept-Language: zh-CN,zh;q=0.9',
        '--extractor-args', 'youtube:player_client=android',
        '--cookies-from-browser', 'chrome',
        url
    ]);
    
    let rOut = '', rErr = '';
    retry.stdout.on('data', d => (rOut += d.toString()));
    retry.stderr.on('data', d => (rErr += d.toString()));
    
    retry.on('close', c => {
        if (c === 0 && rOut) {
            try {
                const videoInfo = JSON.parse(rOut);
                console.log('‚úÖ ÈáçËØïËß£ÊûêÊàêÂäü:', videoInfo.title);
                
                const processedData = processVideoInfo(videoInfo, url);
                
                return res.json({ 
                    status: 'success', 
                    data: processedData 
                });
            } catch (e) {
                console.error('‚ùå ÈáçËØïËß£ÊûêJSONÂ§±Ë¥•:', e);
            }
        }
        
        console.error('‚ùå ÈáçËØï‰ªçÂ§±Ë¥•:', rErr);
        res.status(500).json({
            error: 'Êó†Ê≥ïËé∑ÂèñËßÜÈ¢ë‰ø°ÊÅØÔºåËØ∑Ê£ÄÊü•URLÊòØÂê¶Ê≠£Á°ÆÊàñËßÜÈ¢ëÊòØÂê¶ÂèØËÆøÈóÆ',
            status: 'error',
            details: rErr
        });
    });
}

/**
 * Â§ÑÁêÜÂíå‰ºòÂåñËßÜÈ¢ë‰ø°ÊÅØ
 */
function processVideoInfo(videoInfo, originalUrl) {
    console.log('üîß Â§ÑÁêÜËßÜÈ¢ë‰ø°ÊÅØ...');
    
    // ÊèêÂèñÂπ∂‰ºòÂåñÊ†ºÂºè‰ø°ÊÅØ
    const allFormats = videoInfo.formats || [];
    console.log(`üìä ÂéüÂßãÊ†ºÂºèÊï∞Èáè: ${allFormats.length}`);
    
    // ÂàÜÁ¶ª‰∏çÂêåÁ±ªÂûãÁöÑÊ†ºÂºè
    const directFormats = allFormats.filter(f => 
        f.protocol === 'https' && 
        f.vcodec !== 'none' && 
        f.height &&
        f.url &&
        !f.url.includes('manifest.googlevideo.com') &&
        f.acodec !== 'none' // Á°Æ‰øùÂåÖÂê´Èü≥È¢ë
    );
    
    const streamFormats = allFormats.filter(f => 
        f.protocol === 'm3u8_native' && 
        f.vcodec !== 'none' && 
        f.height &&
        f.acodec !== 'none' && // Á°Æ‰øùÂåÖÂê´Èü≥È¢ë
        f.__working !== false
    );
    
    console.log(`üéØ Áõ¥Êé•‰∏ãËΩΩÊ†ºÂºè: ${directFormats.length}`);
    console.log(`üì° ÊµÅÂ™í‰ΩìÊ†ºÂºè: ${streamFormats.length}`);
    
    // Â§ÑÁêÜÁõ¥Êé•‰∏ãËΩΩÊ†ºÂºèÔºà‰ºòÂÖàÔºâ
    const processedDirectFormats = directFormats.map(f => ({
        quality: f.height ? `${f.height}p` : 'Êú™Áü•',
        format: f.ext ? f.ext.toUpperCase() : 'MP4',
        fileSize: f.filesize ? formatFileSize(f.filesize) : 
                 f.filesize_approx ? formatFileSize(f.filesize_approx) : 'Êú™Áü•Â§ßÂ∞è',
        fps: f.fps || 30,
        hasAudio: f.acodec !== 'none',
        vcodec: f.vcodec,
        acodec: f.acodec,
        format_id: f.format_id,
        url: f.url,
        downloadType: 'direct',
        bitrate: f.tbr || null,
        isRecommended: true
    }));
    
    // Â§ÑÁêÜÊµÅÂ™í‰ΩìÊ†ºÂºèÔºàÂ§áÁî®Ôºâ
    const processedStreamFormats = streamFormats.slice(0, 3).map(f => ({
        quality: f.height ? `${f.height}p` : 'Êú™Áü•',
        format: f.ext ? f.ext.toUpperCase() : 'MP4',
        fileSize: 'ÊµÅÂ™í‰ΩìÊ†ºÂºè',
        fps: f.fps || 30,
        hasAudio: f.acodec !== 'none',
        vcodec: f.vcodec,
        acodec: f.acodec,
        format_id: f.format_id,
        url: f.url,
        downloadType: 'stream',
        bitrate: f.tbr || null,
        isRecommended: false
    }));
    
    // ÂêàÂπ∂Âπ∂ÊéíÂ∫èÊ†ºÂºè
    const formats = [...processedDirectFormats, ...processedStreamFormats]
        .sort((a, b) => {
            // ‰ºòÂÖàÊé®ËçêÁõ¥Êé•‰∏ãËΩΩÊ†ºÂºè
            if (a.isRecommended && !b.isRecommended) return -1;
            if (!a.isRecommended && b.isRecommended) return 1;
            // ÁÑ∂ÂêéÊåâË¥®ÈáèÊéíÂ∫è
            return parseInt(b.quality) - parseInt(a.quality);
        });
    
    console.log(`‚úÖ ÊúÄÁªàÂ§ÑÁêÜÊ†ºÂºèÊï∞Èáè: ${formats.length}`);
    
    // ÊûÑÂª∫ËøîÂõûÁöÑËßÜÈ¢ë‰ø°ÊÅØ
    const extractedInfo = {
        videoId: videoInfo.id || 'unknown',
        title: videoInfo.title || 'Êú™Áü•Ê†áÈ¢ò',
        description: videoInfo.description ? 
            videoInfo.description.substring(0, 200) + '...' : 'ÊöÇÊó†ÊèèËø∞',
        thumbnail: videoInfo.thumbnail || 'https://via.placeholder.com/300x200/667eea/ffffff?text=Êó†Â∞ÅÈù¢',
        uploadDate: videoInfo.upload_date ? 
            `${videoInfo.upload_date.substring(0, 4)}-${videoInfo.upload_date.substring(4, 6)}-${videoInfo.upload_date.substring(6, 8)}` : 'Êú™Áü•Êó•Êúü',
        channelName: videoInfo.uploader || 'Êú™Áü•È¢ëÈÅì',
        duration: videoInfo.duration ? 
            formatDuration(videoInfo.duration) : 'Êú™Áü•Êó∂Èïø',
        formats: formats,
        originalUrl: originalUrl,
        
        // Ê∑ªÂä†È¢ùÂ§ñ‰ø°ÊÅØ
        viewCount: videoInfo.view_count || 0,
        likeCount: videoInfo.like_count || 0,
        extractorInfo: {
            extractor: videoInfo.extractor,
            extractorKey: videoInfo.extractor_key
        }
    };

    return extractedInfo;
}

/**
 * Ê†ºÂºèÂåñÊó∂Èïø
 */
function formatDuration(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    } else {
        return `${minutes}:${secs.toString().padStart(2, '0')}`;
    }
}

/**
 * Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
 */
function formatFileSize(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// ============================================================================
// ÊúçÂä°Âô®ÂêØÂä®
// ============================================================================

app.listen(PORT, () => {
    console.log('üé¨ ÊòìÂºóYouTubeËßÜÈ¢ë‰∏ãËΩΩÂô®ÂêéÁ´ØÊúçÂä° - ‰∏ì‰∏öÁâà');
    console.log('='.repeat(60));
    console.log(`üöÄ ÊúçÂä°Âô®Â∑≤ÂêØÂä®ÔºÅ`);
    console.log(`üì± ËÆøÈóÆÂú∞ÂùÄ: http://localhost:${PORT}`);
    console.log(`üîß APIÊµãËØïÂú∞ÂùÄ: http://localhost:${PORT}/api/test`);
    console.log(`üîç yt-dlpÊ£ÄÊü•: http://localhost:${PORT}/api/check-ytdlp`);
    console.log(`üìÅ ÈùôÊÄÅÊñá‰ª∂ÁõÆÂΩï: public/`);
    console.log('');
    console.log('üéØ Êû∂ÊûÑËØ¥Êòé:');
    console.log('  - ÂêéÁ´Ø‰∏ìÊ≥®: ËßÜÈ¢ë‰ø°ÊÅØËß£Êûê');
    console.log('  - ÂâçÁ´ØË¥üË¥£: Áõ¥Êé•‰∏ãËΩΩÊñá‰ª∂');
    console.log('  - ‰ºòÂäø: Á®≥ÂÆö„ÄÅÂø´ÈÄü„ÄÅÊó†ÊúçÂä°Âô®ÂéãÂäõ');
    console.log('='.repeat(60));
    
    // Ê£ÄÊü•yt-dlpÊòØÂê¶ÂèØÁî®
    const testProcess = spawn('yt-dlp', ['--version']);
    testProcess.on('close', (code) => {
        if (code === 0) {
            console.log('‚úÖ yt-dlp Â∑≤ÂáÜÂ§áÂ∞±Áª™');
        } else {
            console.log('‚ö†Ô∏è  Ë≠¶Âëä: yt-dlp ÂèØËÉΩÊú™Ê≠£Á°ÆÂÆâË£Ö');
        }
        console.log('');
    });
    testProcess.on('error', () => {
        console.log('‚ùå ÈîôËØØ: yt-dlp Êú™ÊâæÂà∞ÔºåËØ∑Ê£ÄÊü•ÂÆâË£Ö');
        console.log('');
    });
});

// ‰ºòÈõÖÂÖ≥Èó≠ÊúçÂä°Âô®
process.on('SIGINT', () => {
    console.log('\nüõë Ê≠£Âú®ÂÖ≥Èó≠ÊúçÂä°Âô®...');
    console.log('üëã ÊÑüË∞¢‰ΩøÁî®ÊòìÂºóYouTubeËßÜÈ¢ë‰∏ãËΩΩÂô®‰∏ì‰∏öÁâàÔºÅ');
    process.exit(0);
});